#**********************************************************#
#          ====== springboot template ======               #
#**********************************************************#

#**********************************************************#
#                      == Service ==                       #
#**********************************************************#
## Service Type设置 (可以设置为ClusterIP、NodePort、None) ##
service:
  type: ClusterIP
  ports:
    - name: server
      port: 8000
      targetPort: 8000
      protocol: TCP

## ========== service CluserIP配置示例 ========== #####
# service:
#   type: NodePort
#   labels:
#     svcEndpoints: actuator
#   ports:
#     - name: server
#       port: 8080
#       targetPort: 8080
#       protocol: TCP
## ========== service NodePort配置示例 ========== #####
# service:
#   type: ClusterIP
#   labels:
#     svcEndpoints: actuator
#   ports:
#     - name: server
#       port: 8080
#       targetPort: 8080
#       nodePort: 30080
#       protocol: TCP

#**********************************************************#
#                      == Image ==                         #
#**********************************************************#

image:
  repository: site.mingsha:5555/app/mingsha-template-vue-ui-dev
  tag: 1.0.0
  pullPolicy: IfNotPresent

replicas: 1

imagePullSecrets: []
restartPolicy: Always

#**********************************************************#
#                       == Port ==                         #
#**********************************************************#

ports:
  - name: server
    containerPort: 8000
    protocol: TCP

#**********************************************************#
#                   == PodAnnotations ==                   #
#**********************************************************#

podAnnotations: {}

## ========== readinessProbe配置示例 ========== #####
# podAnnotations：
#   prometheus.io/scrape: "true"
#   prometheus.io/port: "9030"
#   prometheus.io/path: "/"

#**********************************************************#
#                      == Probe ==                         #
#**********************************************************#

livenessProbe:
  httpGet:
    path: /
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 10
  successThreshold: 1
  failureThreshold: 3

## ========== livenessProbe配置示例 ========== #####
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
## ========== readinessProbe配置示例 ========== #####
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

#**********************************************************#
#                 == serviceAccount ==                     #
#**********************************************************#

serviceAccountName: {}

## ========== serviceAccount配置示例 ========== #####
# serviceAccountName: admin

#**********************************************************#
#                  == podSecurity ==                       #
#**********************************************************#

podSecurityContext: {}
securityContext: {}

## ========== podSecurityContext配置示例 ========== #####
# podSecurityContext:
  # fsGroup: 2000
## ========== securityContext配置示例 ========== #####
# securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

#**********************************************************#
#                    == Resources ==                       #
#**********************************************************#

resources:
  limits:
    cpu: 500m
    memory: 1024Mi
  requests:
    cpu: 100m
    memory: 128Mi

## ========== resources配置示例 ========== #####
# resources:
#   limits:
#     cpu: 2000m
#     memory: 384Mi
#   requests:
#     cpu: 500m
#     memory: 128Mi

#**********************************************************#
#                   == NodeSelector ==                     #
#**********************************************************#

nodeSelector: {}

## ========== tNodeSelector配置示例 ========== #####
# nodeSelector:
#   kubernetes.io/hostname: k8s-node-2-13

#**********************************************************#
#                    == Tolerations ==                     #
#**********************************************************#

tolerations: []

## ========== tolerations配置示例 ========== #####
# tolerations:
#   - operator: Exists

#**********************************************************#
#                      == Affinity ==                      #
#**********************************************************#

affinity: {}

## ========== node affinity配置示例 ========== #####
# affinity:
#   nodeAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#       nodeSelectorTerms:
#         - matchExpressions:
#             - key: kubernetes.io/hostname
#               operator: In
#               values:
#                 - k8s-node-2-12
#     preferredDuringSchedulingIgnoredDuringExecution:
#       - weight: 1   #取值范围1-100
#         preference:
#           matchExpressions:
#             - key: kube
#               operator: In
#               values:
#                 - test

#**********************************************************#
#                      == Ingress ==                       #
#**********************************************************#

ingress:
  enabled: true
  hosts:
    - name: mingsha-template-vue-ui.mingsha-dev.internal.local
      path: /
      service: mingsha-template-vue-ui
      port: 8000
  # hostname: app.mydlq.club
  # path: /
  # service: test
  # port: 80
  # annotations: {}
  # tls:
  #   - secretName: mydlq-tls
  #     hosts:
  #       - www.mydlq.club
  ## 配置多个域名与路径
  ## hosts:
  ## - name: cloud.mydlq.club
  ##   path: /
  ##   service: test1
  ##   port: server
  ## - name: www.mydlq.club
  ##   path: /
  ##   service: test2
  ##   port: server

## ========== http协议Ingress配置示例 ========== #####
# ingress:
#   enabled: true
#   hostname: www.mydlq.club
#   path: /
#   service: traefik-dashboard
#   port: 8080
#   annotations:
#     kubernetes.io/ingress.class: traefik
#     traefik.ingress.kubernetes.io/router.entrypoints: web
## ========== https协议Ingress配置示例 ==========  #####
# ingress:
#   enabled: true
#   hostname: cloud.mydlq.club
#   path: /
#   service: kubernetes-dashboard
#   port: 443
#   annotations:
#     kubernetes.io/ingress.class: traefik
#     traefik.ingress.kubernetes.io/router.tls: "true"
#     traefik.ingress.kubernetes.io/router.entrypoints: websecure
#   tls:
#     - secretName: mydlq-tls
#       hosts:
#         - cloud.mydlq.club

#**********************************************************#
#                      == mount ==                         #
#**********************************************************#
persistence:
  enabled: false
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim:
  storageClass:
  annotations: {}
  labels: {}
  accessMode: "ReadWriteOnce"
  size: "8Gi"
  volumeMounts: []
  volumes: []

  # volumeMounts:
  #   - name: spring-app-config
  #     mountPath: /opt/deployments/config
  #     readOnly: true
  #   - name: data-dir
  #     mountPath: /data
  # volumes:
  #   - name: spring-app-config
  #     configMap:
  #       name: config
  #       items:
  #       - key: application.yml
  #         path: application.yml
  #   - name: data-dir
  #     persistentVolumeClaim:
  #       claimName: datadir-pvc
